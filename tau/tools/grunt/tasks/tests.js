/**
 * Tasks for framework testing
 *
 * @author Micha≈Ç Szepielak <m.szepielak@samsung.com>
 * Licensed under the MIT license.
 */

module.exports = function (grunt) {
	"use strict";

	var configProperty,
		path = require("path"),
		buildFrameworkPath = path.join("dist"),
		testsPath = path.join("tests");

	grunt.config("test", {
		wearable: {
			"build-task": "release",
			"qunit-main": true
		},
		mobile: {
			"build-task": "releasemobile",
			"qunit-main": true
		},
		jqm: {
			"build-task": "releasemobile",
			"qunit-main": false
		}
	});

	// Update config for task; copy
	configProperty = grunt.config.get("copy");
	configProperty["test-libs"] = {
		expand: true,
		src: path.join(buildFrameworkPath, "**"),
		dest: path.join("tests", "libs")
	}
	grunt.config.set("copy", configProperty);

	// Update config for task; concat
	configProperty = grunt.config.get("concat");
	configProperty["ej-namespace"] = {
		src: [path.join("tests", "libs", "dist", "js", "tau.js"), path.join("tests", "libs", "namespace.js")],
		dest: path.join("tests", "libs", "dist", "js", "tau.js")
	}
	grunt.config.set("concat", configProperty);

	// Update config for task; clean
	configProperty = grunt.config.get("clean");
	configProperty["test-libs"] = {
		src: [path.join("tests", "libs", "dist")]
	}
	grunt.config.set("clean", configProperty);


	// Update config for task; qunit
	configProperty = grunt.config.get("qunit");
	configProperty["jqm"] = [ "tests/js/**/jqm/*.html" ];

	grunt.config.set("qunit", configProperty);

	grunt.loadNpmTasks( "grunt-contrib-qunit" );

	function testProfile(profile) {
		var taskConf = grunt.config.get("test"),
			qunitConf = grunt.config.get("qunit"),
			options = taskConf[profile];

		if (options) {
			// Build framework
			grunt.task.run(options["build-task"]);

			// Clean test libs
			grunt.task.run("copy:test-libs");

			// Copy build framework to libs
			grunt.task.run("copy:test-libs");

			// Inject EJ's namespace fix
			grunt.task.run("concat:ej-namespace");

			// Run qunit main tests. This tests are generated by qunitPrepare in main grunt file
			if (options["qunit-main"] === true) {
				grunt.task.run("qunit:main");
			}

			// Run qunit jqm widget profile tests if there are some
			if (qunitConf[profile] && qunitConf[profile].length > 0) {
				grunt.task.run("qunit:" + profile.toLowerCase());
			}
		} else {
			grunt.log.error("There is no configuration for profile " + profile);
		}
	}

	grunt.registerTask("test", function (profile) {
		if (!profile) {
			profile = "wearable";
		}

		testProfile(profile);
	});

};
